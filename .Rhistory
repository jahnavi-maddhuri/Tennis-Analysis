tennis_long %>%
group_by(win) %>%
dplyr::summarize(count = n())
library(tidyverse)
library(dplyr)
library(tidyverse)
library(Hmisc)
library(cowplot)
library(corrplot)
library(ggplot2)
library(modelsummary)
library(car)
library(knitr)
library(conflicted)
library(glmnet)
conflict_prefer("filter", "dplyr")
# Define the base URL for each type of match data
base_urls <- list(
qualy_chall = "https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_qual_chall_",
#futures = "https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_futures_",
match = "https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_"
)
# Get the current year and create a sequence for the last 5 years
years <- (as.numeric(format(Sys.Date(), "%Y")) - 10):as.numeric(format(Sys.Date(), "%Y"))
# Create a function to download and combine data for all years and match types
download_data <- function(base_url, years) {
data_list <- lapply(years, function(year) {
url <- paste0(base_url, year, ".csv")
tryCatch(
read.csv(url),
error = function(e) {
message("Failed to download: ", url)
NULL
}
)
})
# Combine all years into a single data frame
do.call(rbind, data_list)
}
# Download and combine data for each match type
tennis_qualy_chall <- download_data(base_urls$qualy_chall, years)
#tennis_futures <- download_data(base_urls$futures, years)
tennis_match <- download_data(base_urls$match, years)
# Define a function to standardize column types
standardize_columns <- function(df) {
df %>%
mutate(
tourney_level = as.character(tourney_level),
winner_seed = as.character(winner_seed),
loser_seed = as.character(loser_seed)
)
}
# Apply the function to each dataset
tennis_qualy_chall <- standardize_columns(tennis_qualy_chall)
tennis_match <- standardize_columns(tennis_match)
# Combine all datasets
tennis <- bind_rows(tennis_qualy_chall,tennis_match) #tennis_futures,
# View the combined dataset
head(tennis)
dim(tennis)
sum(is.na(tennis$minutes))
tennis %>%
filter(is.na(winner_rank))
# Subset the rows where winner_ht is NA
missing_height_players <- tennis %>%
filter(is.na(winner_ht)) %>%
distinct(winner_name)
unique(tennis$winner_hand)
table(tennis$winner_hand)
table(tennis$loser_hand)
tennis <- tennis %>%
mutate(
winner_hand = case_when(
winner_hand == "" | winner_hand == "U" ~ "A",  # Convert "" or "U" to "A" for winner
TRUE ~ winner_hand  # Keep the original value for other cases
),
loser_hand = case_when(
loser_hand == "" | loser_hand == "U" ~ "A",  # Convert "" or "U" to "A" for loser
TRUE ~ loser_hand  # Keep the original value for other cases
)
)
loser_hand
table(tennis$loser_hand)
table(tennis$winner_hand)
library(tidyverse)
library(dplyr)
library(tidyverse)
library(Hmisc)
library(cowplot)
library(corrplot)
library(ggplot2)
library(modelsummary)
library(car)
library(knitr)
library(conflicted)
library(glmnet)
conflict_prefer("filter", "dplyr")
# Exclude columns and check data
tennis_impute <- tennis %>%
select(-winner_seed, -loser_seed)  # Exclude irrelevant columns
# Check for missing data
summary(tennis_impute)
# Perform imputation with a different method, and scaling if necessary
tennis_impute$winner_ht <- scale(tennis_impute$winner_ht, center = TRUE, scale = TRUE)
tennis_impute$looser_ht <- scale(tennis_impute$looser_ht, center = TRUE, scale = TRUE)
# Exclude columns and check data
tennis_impute <- tennis %>%
select(-winner_seed, -loser_seed)  # Exclude irrelevant columns
# Check for missing data
summary(tennis_impute)
# Perform imputation with a different method, and scaling if necessary
tennis_impute$winner_ht <- scale(tennis_impute$winner_ht, center = TRUE, scale = TRUE)
tennis_impute$loser_ht <- scale(tennis_impute$loser_ht, center = TRUE, scale = TRUE)
# Run multiple imputations using the 'norm.predict' method
imputed_data <- mice(tennis_impute, m = 5, method = "pmm", seed = 123)
library(mice)
imputed_data <- mice(tennis_impute, m = 5, method = "pmm", seed = 123)
tennis_impute
completed_data <- complete(imputed_data, 1)
imputed_data <- mice(tennis_impute, m = 5, method = "pmm", seed = 123)
library(tidyverse)
library(dplyr)
library(tidyverse)
library(Hmisc)
library(cowplot)
library(corrplot)
library(ggplot2)
library(modelsummary)
library(car)
library(knitr)
library(conflicted)
library(glmnet)
conflict_prefer("filter", "dplyr")
# Define the base URL for each type of match data
base_urls <- list(
qualy_chall = "https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_qual_chall_",
#futures = "https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_futures_",
match = "https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_"
)
# Get the current year and create a sequence for the last 5 years
years <- (as.numeric(format(Sys.Date(), "%Y")) - 10):as.numeric(format(Sys.Date(), "%Y"))
# Create a function to download and combine data for all years and match types
download_data <- function(base_url, years) {
data_list <- lapply(years, function(year) {
url <- paste0(base_url, year, ".csv")
tryCatch(
read.csv(url),
error = function(e) {
message("Failed to download: ", url)
NULL
}
)
})
# Combine all years into a single data frame
do.call(rbind, data_list)
}
# Download and combine data for each match type
tennis_qualy_chall <- download_data(base_urls$qualy_chall, years)
#tennis_futures <- download_data(base_urls$futures, years)
tennis_match <- download_data(base_urls$match, years)
# Define a function to standardize column types
standardize_columns <- function(df) {
df %>%
mutate(
tourney_level = as.character(tourney_level),
winner_seed = as.character(winner_seed),
loser_seed = as.character(loser_seed)
)
}
# Apply the function to each dataset
tennis_qualy_chall <- standardize_columns(tennis_qualy_chall)
tennis_match <- standardize_columns(tennis_match)
# Combine all datasets
tennis <- bind_rows(tennis_qualy_chall,tennis_match) #tennis_futures,
tennis <- tennis %>%
mutate(
winner_hand = case_when(
winner_hand == "" | winner_hand == "U" ~ "A",  # Convert "" or "U" to "A" for winner
TRUE ~ winner_hand  # Keep the original value for other cases
),
loser_hand = case_when(
loser_hand == "" | loser_hand == "U" ~ "A",  # Convert "" or "U" to "A" for loser
TRUE ~ loser_hand  # Keep the original value for other cases
)
)
# View the combined dataset
head(tennis)
dim(tennis)
sum(is.na(tennis$minutes))
tennis %>%
filter(is.na(winner_rank))
# Subset the rows where winner_ht is NA
#missing_height_players <- tennis %>%
#filter(is.na(winner_ht)) %>%
#distinct(winner_name)
#table(tennis$winner_hand)
library(mice)
# Exclude columns and check data
tennis_impute <- tennis %>%
select(-winner_seed, -loser_seed)  # Exclude irrelevant columns
# Check for missing data
summary(tennis_impute)
# Perform imputation with a different method, and scaling if necessary
tennis_impute$winner_ht <- scale(tennis_impute$winner_ht, center = TRUE, scale = TRUE)
tennis_impute$loser_ht <- scale(tennis_impute$loser_ht, center = TRUE, scale = TRUE)
# Run multiple imputations using the 'norm.predict' method
imputed_data <- mice(tennis_impute, m = 5, method = "pmm", seed = 123)
imputed_data <- mice(tennis_impute, m = 5, method = "pmm", seed = 123)
str(tennis_impute)
library(mice)
# Exclude columns and check data
tennis_impute <- tennis %>%
select(winner_ht , loser_ht , surface ,
tourney_level , winner_age , loser_age , w_df , l_df ,
w_bpSaved , l_bpSaved , w_bpFaced , l_bpFaced)  # Exclude irrelevant columns
# Check for missing data
summary(tennis_impute)
# Perform imputation with a different method, and scaling if necessary
tennis_impute$winner_ht <- scale(tennis_impute$winner_ht, center = TRUE, scale = TRUE)
tennis_impute$loser_ht <- scale(tennis_impute$loser_ht, center = TRUE, scale = TRUE)
# Run multiple imputations using the 'norm.predict' method
imputed_data <- mice(tennis_impute, m = 5, method = "pmm", seed = 123)
# Exclude columns and check data
tennis_impute <- tennis %>%
select(winner_ht , loser_ht , surface ,
tourney_level , winner_age , loser_age , w_df , l_df ,
w_bpSaved , l_bpSaved , w_bpFaced , l_bpFaced)  # Exclude irrelevant columns
# Check for missing data
summary(tennis_impute)
# Perform imputation with a different method, and scaling if necessary
#tennis_impute$winner_ht <- scale(tennis_impute$winner_ht, center = TRUE, scale = TRUE)
#tennis_impute$loser_ht <- scale(tennis_impute$loser_ht, center = TRUE, scale = TRUE)
# Run multiple imputations using the 'norm.predict' method
imputed_data <- mice(tennis_impute, m = 5, method = "pmm", seed = 123)
#str(tennis_impute)
completed_data
# Count the number of NAs in each column
missing_summary <- tennis  %>%
summarise(across(everything(), ~ sum(is.na(.))))
missing_summary
# Summary statistics of the variables
summary(tennis)
# Creating new binary indicators
tennis <- tennis %>%
mutate(
winner_seeded = ifelse(is.na(winner_seed), 0, 1),
loser_seeded = ifelse(is.na(loser_seed), 0, 1)
)
# Group-wise imputation: ensure that replacements respect the context of the surface variable
tennis <- tennis %>%
group_by(surface) %>%
mutate(
winner_ht = ifelse(is.na(winner_ht), mean(winner_ht, na.rm = TRUE), winner_ht),
loser_ht = ifelse(is.na(loser_ht), mean(loser_ht, na.rm = TRUE), loser_ht),
minutes = ifelse(is.na(minutes), median(minutes, na.rm = TRUE), minutes)
) %>%
ungroup()
# Drop the missing values in our target variable
tennis <- tennis %>% filter(!is.na(minutes))
# Calculate the percentage of missing values in rank_diff
percent_missing_minutes<- sum(is.na(tennis$minutes)) / nrow(tennis) * 100
# Print the result
print(percent_missing_minutes)
# Player Performance Metrics: Create performance difference metrics (e.g., difference in aces, rank, and rank points):
tennis <- tennis %>%
mutate(
diff_aces = w_ace - l_ace,
diff_rank = loser_rank - winner_rank,
diff_rank_points = loser_rank_points - winner_rank_points
)
# Categorical Variables: Convert categorical variables like surface and tourney_level to factors:
tennis <- tennis %>%
mutate(
surface = as.factor(surface),
tourney_level = as.factor(tourney_level)
)
# Cap or remove extreme values in minutes, winner_ht, and loser_ht:
tennis <- tennis %>%
mutate(
minutes = ifelse(minutes > 300, 300, minutes),
winner_ht = ifelse(winner_ht > 210, 210, winner_ht),
loser_ht = ifelse(loser_ht > 210, 210, loser_ht)
)
#winner_seed
#loser_seed
#15720
# Count the number of NAs in each column
missing_summary <- tennis  %>%
summarise(across(everything(), ~ sum(is.na(.))))
missing_summary
# Summary statistics of the variables
summary(tennis)
# Creating new binary indicators
tennis <- tennis %>%
mutate(
winner_seeded = ifelse(is.na(winner_seed), 0, 1),
loser_seeded = ifelse(is.na(loser_seed), 0, 1)
)
# Group-wise imputation: ensure that replacements respect the context of the surface variable
tennis <- tennis %>%
group_by(surface) %>%
mutate(
winner_ht = ifelse(is.na(winner_ht), mean(winner_ht, na.rm = TRUE), winner_ht),
loser_ht = ifelse(is.na(loser_ht), mean(loser_ht, na.rm = TRUE), loser_ht),
minutes = ifelse(is.na(minutes), median(minutes, na.rm = TRUE), minutes)
) %>%
ungroup()
# Drop the missing values in our target variable
tennis <- tennis %>% filter(!is.na(minutes))
# Calculate the percentage of missing values in rank_diff
percent_missing_minutes<- sum(is.na(tennis$minutes)) / nrow(tennis) * 100
# Print the result
print(percent_missing_minutes)
# Player Performance Metrics: Create performance difference metrics (e.g., difference in aces, rank, and rank points):
tennis <- tennis %>%
mutate(
diff_aces = w_ace - l_ace,
diff_rank = loser_rank - winner_rank,
diff_rank_points = loser_rank_points - winner_rank_points
)
# Categorical Variables: Convert categorical variables like surface and tourney_level to factors:
tennis <- tennis %>%
mutate(
surface = as.factor(surface),
tourney_level = as.factor(tourney_level)
)
# Cap or remove extreme values in minutes, winner_ht, and loser_ht:
tennis <- tennis %>%
mutate(
minutes = ifelse(minutes > 300, 300, minutes),
winner_ht = ifelse(winner_ht > 210, 210, winner_ht),
loser_ht = ifelse(loser_ht > 210, 210, loser_ht)
)
#winner_seed
#loser_seed
#15720
# Count the number of NAs in each column
missing_summary <- tennis  %>%
summarise(across(everything(), ~ sum(is.na(.))))
missing_summary
# Summary statistics of the variables
summary(tennis)
# Creating new binary indicators
tennis <- tennis %>%
mutate(
winner_seeded = ifelse(is.na(winner_seed), 0, 1),
loser_seeded = ifelse(is.na(loser_seed), 0, 1)
)
# Group-wise imputation: ensure that replacements respect the context of the surface variable
tennis <- tennis %>%
group_by(surface) %>%
mutate(
winner_ht = ifelse(is.na(winner_ht), mean(winner_ht, na.rm = TRUE), winner_ht),
loser_ht = ifelse(is.na(loser_ht), mean(loser_ht, na.rm = TRUE), loser_ht),
minutes = ifelse(is.na(minutes), median(minutes, na.rm = TRUE), minutes)
) %>%
ungroup()
# Drop the missing values in our target variable
tennis <- tennis %>% filter(!is.na(minutes))
# Calculate the percentage of missing values in rank_diff
percent_missing_minutes<- sum(is.na(tennis$minutes)) / nrow(tennis) * 100
# Print the result
print(percent_missing_minutes)
# Player Performance Metrics: Create performance difference metrics (e.g., difference in aces, rank, and rank points):
tennis <- tennis %>%
mutate(
diff_aces = w_ace - l_ace,
diff_rank = loser_rank - winner_rank,
diff_rank_points = loser_rank_points - winner_rank_points
)
# Categorical Variables: Convert categorical variables like surface and tourney_level to factors:
tennis <- tennis %>%
mutate(
surface = as.factor(surface),
tourney_level = as.factor(tourney_level)
)
# Cap or remove extreme values in minutes, winner_ht, and loser_ht:
tennis <- tennis %>%
mutate(
minutes = ifelse(minutes > 300, 300, minutes),
winner_ht = ifelse(winner_ht > 210, 210, winner_ht),
loser_ht = ifelse(loser_ht > 210, 210, loser_ht)
)
#winner_seed
#loser_seed
#15720
library(mice)
# Exclude columns and check data
tennis.sub <- tennis %>%
select(minutes , diff_rank , diff_aces , winner_ht , loser_ht , surface ,
tourney_level , winner_age , loser_age , w_df , l_df ,
w_bpSaved , l_bpSaved , w_bpFaced , l_bpFaced)  # Exclude irrelevant columns
tennis.sub <- unlabel(tennis.sub) #unlabel the data (labels cause problem for the mice function)
library(mice)
library(sjlabelled)
library(tidyverse)
# Exclude columns and check data
tennis.sub <- tennis %>%
select(minutes , diff_rank , diff_aces , winner_ht , loser_ht , surface ,
tourney_level , winner_age , loser_age , w_df , l_df ,
w_bpSaved , l_bpSaved , w_bpFaced , l_bpFaced)  # Exclude irrelevant columns
tennis.sub <- unlabel(tennis.sub) #unlabel the data (labels cause problem for the mice function)
tennis.imp <- mice(tennis.sub, m=5, method="pmm", print=FALSE, seed = 123)
tennis.comp <- complete(tennis.imp, "long", include=TRUE) #stack the imputed values into one variable and include he observed values
tennis.comp$winner_ht.comp <- cci(tennis$winner_ht) #create an indicator for completeness
ggplot(tennis.comp, aes(x=factor(.imp), y=winner_ht, fill=winner_ht.comp))+
geom_boxplot()
with(tennis.imp, lm(minutes ~ diff_rank + diff_aces + winner_ht + loser_ht + surface +
tourney_level + winner_age + loser_age + w_df + l_df +
w_bpSaved + l_bpSaved + w_bpFaced + l_bpFaced, data = train))
